const recaptcha={ready:!1,loading:!1,load:async function(){if(this.ready)return!0;if(this.loading)return new Promise(resolve=>setTimeout(()=>resolve(this.load()),10));this.loading=!0,this.key=document.querySelector("#recaptchakey").value;const script=document.createElement("script");return script.src=`https://www.google.com/recaptcha/api.js?render=${this.key}`,script.async=!0,document.head.appendChild(script),new Promise(resolve=>script.onload=()=>{this.ready=!0,resolve(!0)})},getToken:async function(){return await this.load(),new Promise(resolve=>grecaptcha.ready(()=>grecaptcha.execute(this.key,{action:"submit"}).then(token=>resolve(token))))}};recaptcha.load();const session={get:async function(){if(this.isExpired()){const body={grc:await recaptcha.getToken()};this.id&&(body.currentSession=this.id);const data=await(await fetch("/session",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(body)})).json();return!data.error&&(this.id=data.sessionid,this.expireAt=data.expireAt,this.id)}return this.id},isExpired:function(){return!this.expireAt||(new Date).getTime()>this.expireAt}};class DynamicScript{constructor(url){const script=document.createElement("script");script.src=url,script.async=!0,document.head.appendChild(script),script.onLoad=this.onLoad}}new DynamicScript("https://kit.fontawesome.com/c1a16f97ec.js");const cookies={set:function(key,value,{expires:expires,path:path}={}){expires||(expires=864e5),path||(path="/");let expTime=0;"object"==typeof expires?(expTime+=1e3*expires.seconds||0,expTime+=1e3*expires.minutes*60||0,expTime+=1e3*expires.hours*60*60||0,expTime+=1e3*expires.days*60*60*24||0):expTime=expires;const now=new Date;expTime=now.setTime(now.getTime()+expTime);const cookieString=`${key}=${value};expires=${new Date(expTime).toUTCString()};path=${path}`;return document.cookie=cookieString,cookieString},get:function(key){const cookies=document.cookie.split(";").map(e=>e.trim()),match=cookies.filter(e=>e.split("=")[0]==key);return!!match.length&&match[0].split("=")[1]},delete:function(key){const cookies=document.cookie.split(";").map(e=>e.trim()),match=cookies.filter(e=>e.split("=")[0]==key);return document.cookie=`${key}=0;expires=${(new Date).toUTCString()}`,match.length>0}},chart={package:import("https://unpkg.com/lightweight-charts/dist/lightweight-charts.standalone.production.js"),ready:!1,timeframe:60,page:1,candles:1e3,lastCandle:((new Date).getTime()/1e3).toFixed(0),allRead:!1,init:async function(){await this.package,document.querySelector("#chart").innerHTML="",this.obj=LightweightCharts.createChart(document.querySelector("#chart"),{width:Math.min(document.querySelector("#frame").offsetWidth-20,600),height:300,crosshair:{mode:LightweightCharts.CrosshairMode.Normal},timeScale:{timeVisible:!0,secondsVisible:!1}}),window.addEventListener("resize",()=>{this.obj.resize(Math.min(document.querySelector("#frame").offsetWidth-20,600),300)}),this.series={instant:{color:"#ff0000"},fast:{color:"#ff00ff"},standard:{color:"#0000ff"},slow:{color:"#00ff00"}},Object.entries(this.series).forEach(([key,value])=>{document.querySelector(`#toggle-container #${key}`).addEventListener("click",(async function(){this.classList.toggle("active"),value.visible=this.classList.contains("active"),value.series&&value.series.applyOptions({visible:value.visible})}))});const container=document.querySelector("#chart"),toolTip=document.createElement("div");toolTip.id="tooltip-chart",container.appendChild(toolTip),this.obj.subscribeCrosshairMove(param=>{const s=Object.keys(this.series).map(e=>this.series[e].series);if(void 0===param.point||!param.time||param.point.x<0||param.point.x>container.clientWidth||param.point.y<0||param.point.y>container.clientHeight)toolTip.style.display="none";else{toolTip.style.display="block",toolTip.innerHTML=Object.keys(this.series).filter(e=>this.series[e].visible).map(e=>{const price=param.seriesPrices.get(this.series[e].series),key=e.charAt(0).toUpperCase()+e.slice(1);return`<div class="${key.toLowerCase()}">${key}: ${price}</div>`}).join("");const coordinateY=container.offsetTop+10,coordinateX=container.offsetLeft+10;toolTip.style.left=`${coordinateX}px`,toolTip.style.top=`${coordinateY}px`}}),document.querySelectorAll("#timeframe-switcher button").forEach(b=>b.addEventListener("click",async()=>{document.querySelectorAll("#timeframe-switcher button").forEach(e=>e.classList.remove("active"));const text=b.innerHTML;b.innerHTML='<i class="fas fa-spin fa-cog"></i>';const history=await this.getHistory(b.id.split("tf-")[1]);b.classList.add("active"),b.innerHTML=text,this.update(history),document.querySelectorAll("#toggle-container button").forEach(b=>{const series=this.series[b.id];series.visible&&series.series.applyOptions({visible:series.visible})})})),this.timeScale=this.obj.timeScale(),this.timeScale.subscribeVisibleLogicalRangeChange(async()=>{const logicalRange=this.timeScale.getVisibleLogicalRange();if(null!==logicalRange&&logicalRange.from<0&&this.history.length>=this.candles&&!this.scrolling&&!this.allRead){this.scrolling=!0;const oldHistory=this.history,newHistory=await this.getHistory(this.timeframe,this.page+1);this.history=[...oldHistory,...newHistory],this.update(this.history),this.page++,this.scrolling=!1,0==newHistory.length&&(this.allRead=!0)}}),this.ready=!0},update:function(data){data.length&&Object.entries(this.series).forEach(([key,value])=>{const speedData=data.map(e=>({value:e[key].high,time:parseInt(new Date(e.timestamp).getTime()/1e3)})).reverse();value.series||(value.series=this.obj.addAreaSeries({lineColor:value.color,topColor:value.color,bottomColor:`${value.color}30`,lineWidth:2,visible:!1})),value.series.setData(speedData)})},setTheme:function(name){let background="#232323",text="#e3dcd0",lines="#3c3c3c";"light"==name&&(background="#eeeeee",text="#511814",lines="#c9c9c9"),this.isReady().then(()=>{this.obj.applyOptions({layout:{backgroundColor:background,textColor:text},grid:{vertLines:{color:lines},horzLines:{color:lines}},rightPriceScale:{borderColor:lines},timeScale:{borderColor:lines}})})},getHistory:async function(timeframe=60,page=1,candles=this.candles){this.timeframe=timeframe;const sessionid=await session.get(),token=await recaptcha.getToken();return this.history=await(await fetch(`/history?grc=${token}&sid=${sessionid}&timeframe=${timeframe}&page=${page}&candles=${candles}&to=${this.lastCandle}`)).json(),this.history.error?(console.log(this.history),401==this.history.error.status?this.getHistory(timeframe,page,candles):[]):this.history},isReady:async function(){return this.ready||new Promise(resolve=>setTimeout(()=>resolve(this.isReady()),10))}};chart.init();const theme={options:["dark","light"],icons:{dark:"sun",light:"moon"},choice:"dark",set:function(name){if(this.options.includes(name)){const oldName=this.choice;document.body.classList.remove(this.choice),document.body.classList.add(name),this.choice=name,cookies.set("theme",name,{expires:{days:365}}),document.querySelector("header #theme").innerHTML=`<i class="fas fa-${this.icons[name]}"></i>`,chart.setTheme(name),oldName!=name&&window.__CPEmbed&&codePens.forEach(e=>e.update())}},load:function(){this.set(cookies.get("theme")||this.choice)},toggle:function(){const index=this.options.indexOf(this.choice),next=this.options[(index+1)%this.options.length];this.set(next)},get:function(){return this.choice}};theme.load(),document.querySelector("#theme").addEventListener("click",()=>theme.toggle());const price={current:0,element:document.querySelector("#price"),get:async function(){const url="https://api.binance.com/api/v3/ticker/price?symbol=BNBUSDT",url24="https://api.binance.com/api/v3/ticker/24hr?symbol=BNBUSDT",price=(await(await fetch(url)).json()).price,price24h=(await(await fetch(url24)).json()).priceChangePercent;return{now:parseFloat(price).toFixed(2),changePercent:parseFloat(price24h).toFixed(2)}},update:async function(){this.current=await this.get(),this.current.changePercent<0?(this.element.querySelector("#color").classList.remove("green"),this.element.querySelector("#color").classList.add("red")):(this.element.querySelector("#color").classList.remove("red"),this.element.querySelector("#color").classList.add("green"),this.current.changePercent=`+${this.current.changePercent}`),this.element.querySelector("#now").innerHTML=this.current.now,this.element.querySelector("#before").innerHTML=this.current.changePercent}};price.update(),setInterval(()=>price.update(),1e4),document.querySelector("#search #api-info").addEventListener("click",async()=>{const input=document.querySelector("#search input"),key=input.value.trim().toLowerCase();if(key.match(api.regex.apiKey)){const data=await api.getKey(key);api.showModal(),api.showWindowInfo(data)}input.value=""}),document.querySelector("#search input").addEventListener("keyup",e=>{"Enter"==e.key&&document.querySelector("#search #api-info").click()}),document.querySelector("#search #drop").addEventListener("click",(async function(){const dropdown=document.createElement("div");dropdown.id="dropdown",dropdown.innerHTML='\n        <div id="create-key" class="item">Create API key</div>\n        <div id="edit-key" class="item">Edit API key</div>\n        <div id="info-key" class="item">API key info</div>\n    ',dropdown.style.top=`${this.offsetTop+this.clientHeight}px`,dropdown.style.left=`${this.offsetLeft+this.clientWidth-130}px`,dropdown.querySelectorAll(".item").forEach(e=>e.addEventListener("click",()=>api.showModal(e.id.split("-")[0])));const fog=document.createElement("div");fog.id="fog",fog.classList.add("invisible"),document.body.appendChild(fog),fog.appendChild(dropdown),fog.addEventListener("click",()=>fog.remove())}));const wallet={address:"0xA6E126a5bA7aE209A92b16fcf464E502f27fb658",loadImg:async function(elem){return new Promise(resolve=>{this.img=new Image;const url="https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=";this.shortAddress=`${this.address.slice(0,6)}...${this.address.slice(-4)}`,elem.querySelector("#wallet").innerHTML=`<span class="long">${this.address}</span><span class="short">${this.shortAddress}</span>`,this.img.src=`${url}${this.address}`,this.img.onload=()=>{elem.classList.remove("disabled"),elem.addEventListener("click",()=>this.showModal()),resolve(this.img)}})},bindModal:function(elem){elem.addEventListener("click",()=>this.showModal())},showModal:function(){const fog=document.createElement("div");fog.id="fog",fog.innerHTML='<div id=\'donate-window\'>\n            <div id="title">\n                <span>Binance Smart Chain (BSC)</span>\n                <span class="big">BNB Wallet</span>\n            </div>\n            <div id="qr"><img></div>\n            <div id="colored">\n                <div id="wallet-container">\n                    <div id="wallet"></div>\n                    <div id="copy"><i class="far fa-copy"></i></div>\n                </div>\n            </div>\n        </div>',fog.addEventListener("click",()=>fog.remove()),fog.querySelector("div").addEventListener("click",e=>e.stopPropagation()),fog.querySelector("img").src=this.img.src,fog.querySelector("#wallet").innerHTML=this.shortAddress,fog.querySelector("#wallet-container").addEventListener("click",()=>this.copyAddress()),document.body.appendChild(fog),fadeIn(fog,500)},copyAddress:function(){const elem=document.querySelector("#fog #wallet"),oldText=elem.innerHTML;elem.innerHTML="COPIED";const container=document.querySelector("#fog #wallet-container");container.classList.add("copy"),setTimeout(()=>{elem.innerHTML=oldText,container.classList.remove("copy")},500),navigator.clipboard.writeText(this.address)}};async function fadeIn(elem,time=300){return new Promise(resolve=>{const oldStyle=elem.getAttribute("style");elem.style.transition=`${time/1e3}s opacity`,elem.style.opacity="0",setTimeout(()=>elem.style.opacity="1",1),setTimeout(()=>{elem.removeAttribute("style"),elem.style=oldStyle,resolve(!0)},time+100)})}async function fadeOut(elem,time=300){return new Promise(resolve=>{elem.style.transition=`${time/1e3}s opacity`,setTimeout(()=>elem.style.opacity="0",1),setTimeout(()=>{elem.remove(),resolve(!0)},time+100)})}wallet.loadImg(document.querySelector("#donate")),document.querySelectorAll(".donate-link").forEach(e=>wallet.bindModal(e));class Tooltip{constructor(parent,text,{createEvent:createEvent="click",killEvent:killEvent="mouseleave",timeout:timeout=null}={}){return this.parent=parent,this.text=text,this.parent.addEventListener(createEvent,e=>{this.create(e),timeout&&setTimeout(()=>this.kill(),timeout)}),"mouseleave"==killEvent&&this.parent.addEventListener(killEvent,()=>this.kill()),this}create(event){const tooltip=document.createElement("div");this.element=tooltip,tooltip.classList.add("tooltip"),tooltip.innerHTML=this.text,tooltip.style.top=`${event.y}px`,tooltip.style.left=`${event.x}px`,document.querySelectorAll(".tooltip").forEach(e=>e.remove()),this.parent.insertAdjacentElement("afterend",tooltip),fadeIn(tooltip,200)}kill(){this.element&&fadeOut(this.element,200)}setText(text){this.text=text}}const tooltipList=["Accepted on 35% of blocks","Accepted on 60% of blocks","Accepted on 90% of blocks","Accepted on every block"];document.querySelectorAll(".gas i.fa-question-circle").forEach((e,i)=>{new Tooltip(e,tooltipList[i])});const gasTimer={interval:1e4,toInterval:100,counter:100,element:document.querySelector("#countdown #filled"),init:function(interval,toInterval){this.interval=interval,this.toInterval=toInterval,this.counter=1,this.countDown()},countDown:function(){setTimeout(()=>{this.counter--,this.element.style.width=`${this.counter/(this.interval/this.toInterval)*100}%`,this.counter<=0?(this.counter=this.interval/this.toInterval,this.update().then(()=>this.countDown())):this.stop||this.countDown()},this.toInterval)},update:async function(){const sessionid=await session.get(),token=await recaptcha.getToken(),startTime=new Date,data=await(await fetch(`/gas?grc=${token}&sid=${sessionid}`)).json(),requestTime=new Date-startTime;if(data.error){if(console.log(data),401==data.status){this.stop=!0;const fog=document.createElement("div");fog.id="fog",fog.innerHTML='<div id="api-window"><div id="content">\n                    <h2>Session expired</h2>\n                    <p>This page must be reloaded to keep showing updated gas prices</p>\n                    <div id="button-container">\n                        <button id="reload">Reload</button>\n                        <button id="cancel">Cancel</button>\n                    </div>\n                </div></div>',document.body.appendChild(fog),fog.addEventListener("click",()=>fog.remove()),fog.querySelector("#api-window").addEventListener("click",e=>e.preventDefault()),fog.querySelector("#cancel").addEventListener("click",()=>fog.remove()),fog.querySelector("#reload").addEventListener("click",()=>window.location.reload())}}else this.onUpdate(data,requestTime);return data}};gasTimer.init(3e4,100),gasTimer.onUpdate=function(data,requestTime){const speedList=["slow","standard","fast","instant"];document.querySelectorAll(".gas .body").forEach((e,i)=>{data[speedList[i]]&&(e.querySelector(".gwei").innerHTML=`${data[speedList[i]]} GWei`)}),setColorGradient(document.querySelector("#time-sign"),requestTime);const sample=document.querySelector("#sample");if(!sample.classList.contains("loaded")){const formatted=`{\n    <span class="json key">"timestamp"</span>: <span class="json string">"${data.timestamp||""}"</span>,\n    <span class="json key">"slow"</span>: <span class="json number">${data.slow||0}</span>,\n    <span class="json key">"standard"</span>: <span class="json number">${data.standard||0}</span>,\n    <span class="json key">"fast"</span>: <span class="json number">${data.fast||0}</span>,\n    <span class="json key">"instant"</span>: <span class="json number">${data.instant||0}</span>\n    <span class="json key">"block_time"</span>: <span class="json number">${data.block_time||0}</span>\n    <span class="json key">"last_block"</span>: <span class="json number">${data.last_block||0}</span>\n}`;sample.innerHTML=formatted,sample.classList.add("loaded"),document.querySelector("#timeframe-switcher #tf-60").click(),document.querySelector("#toggle-container #standard").click()}};const tooltipColor=new Tooltip(document.querySelector("#time-sign"),"",{createEvent:"mouseenter"});function setColorGradient(elem,time){const maxTime=1e4,rate=Math.min(time,1e4)/1e4,color={b:"00",toString:color=>"00".slice(color.toString(16).length)+color.toString(16)};color.r=color.toString(Math.round(200*rate)),color.g=color.toString(Math.round(200*(1-rate))),elem.style["background-color"]=`#${color.r}${color.g}${color.b}`,tooltipColor.setText(`API took ${(time/1e3).toFixed(2)}s to respond`)}class CodePen{static started=!1;constructor(element,id){this.id=id,this.element=element,this.update()}async init(){if(super.started)return!0;const ready=await import("https://cpwebassets.codepen.io/assets/embed/ei.js");return super.started=!0,ready}update(){this.init().then(()=>{const codepenEmbed=`<p class="codepen" data-height="265" data-theme-id="{{THEME}}" data-default-tab="js,result" data-user="pswerlang" data-slug-hash="${this.id}" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="BSC gas price sample code"><span>See the Pen <a href="https://codepen.io/pswerlang/pen/${this.id}">BSC gas price sample code</a> by Pablo (<a href="https://codepen.io/pswerlang">@pswerlang</a>) on <a href="https://codepen.io">CodePen</a>.</span></p>`;this.element.innerHTML=codepenEmbed.split("{{THEME}}").join(theme.get()),window.__CPEmbed()})}}const codePens=["PomVooa","yLbZLeB"].map((v,i)=>new CodePen(document.querySelector(`#codepen${i+1}`),v)),api={regex:{url:new RegExp(/^(?:https?:\/\/)?(?:www\.)?([a-z0-9._-]{1,256}\.[a-z0-9]{1,6})\b.*$/),apiKey:new RegExp(/^[a-f0-9]{32}$/)},createNewApiContent:function(){const tabsContent=this.tabsContent;tabsContent.create.innerHTML='<h2>New API key</h2>\n        <p class="title origin">Origin <i class="far fa-question-circle"></i></p>\n        <input type="text" class="input-text" id="origin" placeholder="mywebsite.com">\n        <span id="origin-tip" class="tip"></span>\n        <p class="title note">Note <i class="far fa-question-circle"></i></p>\n        <input type="text" class="input-text" id="note" placeholder="My personal note for this key">\n        <div id="checkbox-container">\n            <label>\n                <input type="checkbox">\n                <span>I agree to not share any of my API key information with others.</span>\n            </label>\n            <label>\n                <input type="checkbox">\n                <span>I am aware that front-end code is publicly readable and exposing my API key on it is the same as sharing them.</span>\n            </label>\n        </div>\n        <div id="button-container"><button id="create-key" disabled>Create API key</button></div>',tabsContent.create.querySelectorAll("#checkbox-container input").forEach(e=>e.addEventListener("click",()=>{2==Array.from(tabsContent.create.querySelectorAll("#checkbox-container input")).filter(e=>e.checked).length?tabsContent.create.querySelector("#create-key").removeAttribute("disabled"):tabsContent.create.querySelector("#create-key").setAttribute("disabled",!0)}));const urlRegex=this.regex.url;tabsContent.create.querySelector("#origin").addEventListener("keyup",()=>{const value=tabsContent.create.querySelector("#origin").value.trim().toLowerCase(),match=value.match(urlRegex);if(match&&match.length>1){const tip=tabsContent.create.querySelector("#origin-tip");tip.innerHTML="",tabsContent.create.querySelector("#origin").classList.remove("red")}}),tabsContent.create.querySelector("#create-key").addEventListener("click",(async function(){const body={};let error=!1;if(tabsContent.create.querySelector("#origin").value.length){const value=tabsContent.create.querySelector("#origin").value.trim().toLowerCase(),match=value.match(urlRegex);if(match&&match.length>1)body.origin=value;else{const tip=tabsContent.create.querySelector("#origin-tip");tip.innerHTML="Invalid domain",tabsContent.create.querySelector("#origin").classList.add("red"),error=!0}}if(tabsContent.create.querySelector("#note").value.length&&(body.note=tabsContent.create.querySelector("#note").value.trim()),!error){this.setAttribute("disabled",!0),this.innerHTML='<i class="fas fa-spin fa-cog"></i>',body.grc=await recaptcha.getToken();const data=await api.createKey(body);api.showWindowCreate(data)}}))},createEditApiContent:function(){const tabsContent=this.tabsContent;tabsContent.edit.innerHTML='<h2>Edit API key</h2>\n        <p class="title">API Key</p>\n        <input type="text" class="input-text keys" id="key" placeholder="00000000000000000000000000000000">\n        <span id="key-tip" class="tip"></span>\n        <p class="title">API Secret</p>\n        <input type="text" class="input-text keys" id="secret" placeholder="00000000000000000000000000000000">\n        <span id="secret-tip" class="tip"></span>\n        <p class="title origin">Origin <i class="far fa-question-circle"></i></p>\n        <input type="text" class="input-text" id="origin" placeholder="mywebsite.com">\n        <span id="origin-tip" class="tip"></span>\n        <p class="title note">Note <i class="far fa-question-circle"></i></p>\n        <input type="text" class="input-text" id="note" placeholder="My personal note for this key">\n        <div id="checkbox-container">\n            <label>\n                <input type="checkbox">\n                <span>\n                    <div>I want to reset my API key hash</div>\n                    <div class=\'tip hidden\'>WARNING: The current API key hash will not be usable anymore.</div>\n                </span>\n            </label>\n        </div>\n        <div id="button-container"><button id="edit-key">Save</button></div>';const urlRegex=this.regex.url,apiKeyRegex=this.regex.apiKey;tabsContent.edit.querySelector("#origin").addEventListener("keyup",(function(){const value=this.value.trim().toLowerCase(),match=value.match(urlRegex);if(match&&match.length>1){const tip=tabsContent.edit.querySelector("#origin-tip");tip.innerHTML="",tabsContent.edit.querySelector("#origin").classList.remove("red")}})),tabsContent.edit.querySelectorAll("#key, #secret").forEach(e=>e.addEventListener("keyup",(function(){const value=this.value.trim().toLowerCase();if(value.match(apiKeyRegex)){const tip=tabsContent.edit.querySelector(`#${this.id}-tip`);tip.innerHTML="",this.classList.remove("red")}}))),tabsContent.edit.querySelector("#checkbox-container input").addEventListener("change",(function(){const tip=this.parentNode.querySelector(".tip");this.checked?tip.classList.remove("hidden"):tip.classList.add("hidden")})),tabsContent.edit.querySelector("#edit-key").addEventListener("click",(async function(){const body={};let error=!1;if(tabsContent.edit.querySelector("#origin").value.length){const value=tabsContent.edit.querySelector("#origin").value.trim().toLowerCase(),match=value.match(urlRegex);if(match&&match.length>1)body.origin=value;else{const tip=tabsContent.edit.querySelector("#origin-tip");tip.innerHTML="Invalid domain",tabsContent.edit.querySelector("#origin").classList.add("red"),error=!0}}tabsContent.edit.querySelector("#note").value.length&&(body.note=tabsContent.edit.querySelector("#note").value.trim());const key=tabsContent.edit.querySelector("#key").value.trim().toLowerCase();if(!key.match(apiKeyRegex)){const tip=tabsContent.edit.querySelector("#key-tip");tip.innerHTML="Invalid API key",tabsContent.edit.querySelector("#key").classList.add("red"),error=!0}if(body.secret=tabsContent.edit.querySelector("#secret").value.trim().toLowerCase(),!body.secret.match(apiKeyRegex)){const tip=tabsContent.edit.querySelector("#secret-tip");tip.innerHTML="Invalid API secret",tabsContent.edit.querySelector("#secret").classList.add("red"),error=!0}const reset=tabsContent.edit.querySelector("#checkbox-container input").checked;if(reset&&(body.resetKey=!0),!error){this.setAttribute("disabled",!0),this.innerHTML='<i class="fas fa-spin fa-cog"></i>';const data=await api.editKey(key,body);api.showWindowEdit(data)}}))},createInfoApiContent:function(){const tabsContent=this.tabsContent;tabsContent.info.innerHTML='<h2>API key information</h2>\n        <p class="title">API key</p>\n        <input type="text" class="input-text keys" id="key" placeholder="00000000000000000000000000000000">\n        <span id="key-tip" class="tip"></span>\n        <div id="button-container"><button id="get-key">Search</button></div>',tabsContent.info.querySelector("#key").addEventListener("keyup",(function(){const value=this.value.trim().toLowerCase();if(value.match(apiKeyRegex)){const tip=tabsContent.info.querySelector("#key-tip");tip.innerHTML="",this.classList.remove("red")}}));const apiKeyRegex=this.regex.apiKey;tabsContent.info.querySelector("#get-key").addEventListener("click",(async function(){let error=!1;const key=tabsContent.info.querySelector("#key").value.trim().toLowerCase();if(!key.match(apiKeyRegex)){const tip=tabsContent.info.querySelector("#key-tip");tip.innerHTML="Invalid API key",tabsContent.info.querySelector("#key").classList.add("red"),error=!0}if(!error){this.setAttribute("disabled",!0),this.innerHTML='<i class="fas fa-spin fa-cog"></i>';const data=await api.getKey(key);api.showWindowInfo(data)}}))},showWindowCreate:function(data){const modal=document.querySelector("#fog #api-window");data.apiKey?(modal.innerHTML=`<div id="content">\n                <h2>API key Created</h2>\n                <p class="title">API Key</p>\n                <div class="input-container">\n                    <input type="text" class="input-text keys" value="${data.apiKey}" readonly>\n                    <div class="input-button"><i class="far fa-copy"></i></div>\n                </div>\n                <p class="title">API Secret</p>\n                <div class="input-container">\n                    <input type="text" class="input-text keys" value="${data.secret}" readonly>\n                    <div class="input-button"><i class="far fa-copy"></i></div>\n                </div>\n                <p class="title">Wallet</p>\n                <div class="input-container">\n                    <input type="text" class="input-text keys" value="${data.wallet}" readonly>\n                    <div class="input-button"><i class="far fa-copy"></i></div>\n                </div>\n                <ul>\n                    <li>Make sure to save this information before closing this window.</li>\n                    <li>We do not store your key and secret in plain text, so we cannot recover them in case of loss.</li>\n                </ul>\n                <div id="button-container"><button id="close">OK</button></div>\n            </div>`,modal.querySelector("#close").addEventListener("click",()=>modal.parentNode.remove()),modal.querySelectorAll(".input-button").forEach(e=>e.addEventListener("click",(function(){const parent=this.closest(".input-container");api.copyText(parent)})))):(modal.innerHTML=`<div id="content">\n                <h2>${data.error||"Message"}</h2>\n                <p>${data.message}</p>\n                <div id="button-container"><button id="close">OK</button></div>\n            </div>`,modal.querySelector("#close").addEventListener("click",()=>document.querySelector("#fog").click()))},showWindowEdit:function(data){const modal=document.querySelector("#fog #api-window");if(data.apiKey){const fields=Object.entries(data).filter(e=>"apiKey"!=e[0]&&"message"!=e[0]).map(e=>`<p class="title">${e[0]}</p><input type="text" class="input-text keys" value="${e[1]}" readonly>`).join("");modal.innerHTML=`<div id="content">\n                <h2>API key information updated</h2>\n                <p class="title">API Key</p>\n                <input type="text" class="input-text keys" value="${data.apiKey}" readonly>\n                ${fields}\n                <div id="button-container"><button id="close">OK</button></div>\n            </div>`}else modal.innerHTML=`<div id="content">\n                <h2>${data.error||"Message"}</h2>\n                <p>${data.message}</p>\n                <div id="button-container"><button id="close">OK</button></div>\n            </div>`;modal.querySelector("#close").addEventListener("click",()=>modal.parentNode.remove())},showWindowInfo:function(data){const modal=document.querySelector("#fog #api-window");if(data.apiKey){const key=data.apiKey,fields=Object.entries(data).filter(e=>"usage"!=e[0]).map(e=>{const label="apiKey"==e[0]?"API Key":e[0];let value=e[1];"credit"==e[0]?value="...":"creation"==e[0]&&(value=new Date(e[1]).toISOString().replace("T"," ").split(".")[0]);let input=`<input type="text" class="input-text keys" id="input-${label}" value="${value}" readonly>`;return"wallet"==e[0]?input=`<div class="input-container">${input}<div id="copy" class="input-button" title="Copy"><i class="far fa-copy"></i></div></div>`:"credit"==e[0]?input=`<div class="input-container">${input}<div id="update" class="input-button" title="Update"><i class="fas fa-sync-alt"></i></div></div>`:"origin"==e[0]&&(input=`<div class="input-container">${input}<a id="open-link" class="input-button" title="Open Link" href="https://${value}" target="_blank" rel="noopener"><i class="fas fa-external-link-alt"></i></a></div>`),`<p class="title">${label}</p>${input}`}).join("");async function refreshCredit(key){const modal=document.querySelector("#fog #api-window");if(modal&&modal.querySelector("#input-credit")){await api.updateCredit(key);const data=await api.getKey(key);modal&&modal.querySelector("#input-credit")&&(modal.querySelector("#input-credit").value=`${(data.credit/1e8).toFixed(8)} BNB`,setTimeout(()=>refreshCredit(key),5e3))}}modal.innerHTML=`<div id="content">\n                <h2>API key information</h2>\n                ${fields}\n                <div id="button-container">\n                    <button id="credit">History</button>\n                    <button id="close">Close</button>\n                </div>\n            </div>`,modal.querySelector("#copy").addEventListener("click",(function(){const parent=this.closest(".input-container");api.copyText(parent)})),modal.querySelector("#update").addEventListener("click",(function(){this.classList.add("clicked"),setTimeout(()=>this.classList.remove("clicked"),700),modal.querySelector("#input-credit").value="...",refreshCredit(key)})),modal.querySelector("#credit").addEventListener("click",async()=>{const data=await this.getCredit(key);this.showWindowCredit(key,data)}),refreshCredit(key)}else modal.innerHTML=`<div id="content">\n                <h2>${data.error||"Message"}</h2>\n                <p>${data.message}</p>\n                <div id="button-container"><button id="close">OK</button></div>\n            </div>`;modal.querySelector("#close").addEventListener("click",()=>document.querySelector("#fog").remove())},showWindowCredit:function(key,data){const modal=document.querySelector("#fog #api-window");let txs='<div class="empty">No transactions found. Try sending some BNB to your API wallet.</div>';if(data.results.length>0){modal.classList.add("large");const tds=data.results.map(e=>`<div class="row">\n                    <div class="cell"><a href="https://bscscan.com/tx/${e.tx}" target="_blank">${e.tx.slice(0,6)}...${e.tx.slice(-4)}</a></div>\n                    <div class="cell">${new Date(e.timestamp).toISOString().replace("T"," ").split(".")[0]}</div>\n                    <div class="cell"><a href="https://bscscan.com/address/${e.fromWallet}" target="_blank">${e.fromWallet.slice(0,6)}...${e.fromWallet.slice(-4)}</a></div>\n                    <div class="cell">${(e.value/1e8).toFixed(8)}</div>\n                </div>`).join("");txs=`<div class="row head">\n                <div class="cell">Tx</div>\n                <div class="cell">Time</div>\n                <div class="cell">From wallet</div>\n                <div class="cell">Value (BNB)</div>\n            </div>\n            <div class="body">${tds}</div>`}txs=`<div class="table">${txs}</div>`,modal.innerHTML=`<div id="content">\n            <h2>API recharge history</h2>\n            <p id="key-show">${key}</p>\n            ${txs}\n            <p id="missing">Missing tx? <a href="https://t.me/bscgas_info" target="_blank">contact us</a>!</p>\n            <div id="button-container"><button id="close">Close</button></div>\n        </div>`,modal.querySelector("#close").addEventListener("click",()=>document.querySelector("#fog").remove())},showModal:function(tabSelected){const fog=document.createElement("div");fog.id="fog",fog.innerHTML='<div id=\'api-window\'>\n            <div id=\'tab-container\'>\n                <div class="tab" id="info"><i class="fas fa-eye"></i><span class="text">Key Info</span></div>\n                <div class="tab" id="edit"><i class="fas fa-edit"></i><span class="text">Edit Key</span></div>\n                <div class="tab" id="create"><i class="fas fa-plus"></i><span class="text">Create Key</span></div>\n                <div class="tab" id="close-tab"><i class="fas fa-times"></i></div>\n            </div>\n            <div id=\'content\'></div>\n        </div>';const tabsContent=Object.fromEntries(["info","edit","create"].map(e=>[e,(()=>{const elem=document.createElement("div");return elem.id="content",elem})()]));this.tabsContent=tabsContent,fog.querySelectorAll(".tab").forEach(e=>e.addEventListener("click",()=>{if("close-tab"==e.id)fog.click();else{e.classList.contains("active")||(fog.querySelectorAll(".tab").forEach(e=>e.classList.remove("active")),e.classList.add("active"));const content=fog.querySelector("#content");content.replaceWith(tabsContent[e.id])}})),fog.addEventListener("click",()=>fog.remove()),fog.querySelector("div").addEventListener("click",e=>e.stopPropagation()),document.body.appendChild(fog),fadeIn(fog,500),this.createNewApiContent(),this.createEditApiContent(),this.createInfoApiContent();const titleInfo={origin:"Informing an origin restrict the use of your API key to only the designated domain. It is highly recommended for preventing unauthorized calls using your key.",note:"You could set a note to your key for informative purposes."};Object.keys(tabsContent).forEach(tab=>tabsContent[tab].querySelectorAll(".title i").forEach(e=>{const inputClass=Array.from(e.parentNode.classList).filter(e=>Object.keys(titleInfo).includes(e));new Tooltip(e,titleInfo[inputClass])})),fog.querySelector(`#tab-container #${tabSelected||"info"}`).click()},createKey:async function(body){return await this.request("/keys",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(body)})},editKey:async function(key,body){return await this.request(`/keys/${key}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(body)})},getKey:async function(key){return await this.request(`/keys/${key}`,{method:"GET",headers:{"Content-Type":"application/json"}})},updateCredit:async function(key){return await this.request(`/credit/${key}`,{method:"PUT",headers:{"Content-Type":"application/json"}})},getCredit:async function(key){return await this.request(`/credit/${key}`,{method:"GET",headers:{"Content-Type":"application/json"}})},getLogs:async function(key,fromTime,toTime){let options={};return fromTime&&(options.fromTime=fromTime),toTime&&(options.toTime=toTime),options=0==Object.keys(options).length?"":"?"+Object.entries(options).map(([key,value])=>`${key}=${value}`).join("&"),await this.request(`/logs/${key}${options}`,{method:"GET",headers:{"Content-Type":"application/json"}})},copyText:function(parent){const input=parent.querySelector("input"),oldText=input.value;input.value="COPIED",setTimeout(()=>input.value=oldText,500),navigator.clipboard.writeText(oldText)},request:async function(endpoint,options){try{const data=await(await fetch(endpoint,options)).json();return data.error&&console.log(data),data}catch(error){return console.log(error),error}}};document.querySelector("#manage-apikey").addEventListener("click",()=>api.showModal());const limits={REQUEST_COST:document.querySelector("#requestcost").value,USAGE_LIMIT:document.querySelector("#usagelimit").value};document.querySelectorAll(".request-limit").forEach(e=>e.innerHTML=limits.USAGE_LIMIT),document.querySelectorAll(".request-cost").forEach(e=>e.innerHTML=limits.REQUEST_COST),price.get().then(price=>document.querySelector("#credit-bnb").innerHTML=`$${(1e-8*price.now).toFixed(10)}`);const dynamicSamples={history:{getData:async function(){return await new Promise(resolve=>{const wait=()=>{chart.history?resolve(chart.history):setTimeout(()=>wait(),10)}})},update:function(data){if(console.log(data),data.length){const container=document.querySelector("#history-sample-container"),content=Object.entries(data[0]).map(([key,value])=>`<span class="json key">"${key}"</span>: ${value="timestamp"==key||"samples"==key?`<span class="json ${typeof value}">${"number"==typeof value?value:`"${value}"`}</span>`:`{\n            ${value=Object.entries(value).map(([key,value])=>`<span class="json key">"${key}"</span>: <span class="json ${typeof value}">${"number"==typeof value?value:`"${value}"`}</span>`).join(",\n            ")}\n        }`}`).join(",\n        ");container.innerHTML=`<pre class="code"><code>[\n    {\n        ${content}\n    },\n\n    ...\n]</code></pre>`}}},keys:{placeholder:{apiKey:"00000000000000000000000000000000",creation:"0000-00-00T00:00:00.000Z",wallet:"0x0000000000000000000000000000000000000000",credit:0,origin:"domain.com",note:"note to myself",usage:{apiKeyHour:0,ipHour:0,apiKeyTotal:0,ipTotal:0}},getData:async function(key){if(!key)return this.placeholder;const data=await api.getKey(key);return data.apiKey?(this.realData=!0,data):this.placeholder},update:function(data){const container=document.querySelector("#key-get-info-container");data.usage=`{\n        ${Object.entries(data.usage).map(([key,value])=>`<span class="json key">"${key}"</span>: <span class="json number">${value}</span>`).join(",\n        ")}\n    }`;const content=Object.entries(data).map(([key,value])=>{let valueDom="";return valueDom="usage"==key?data.usage:`<span class="json ${typeof value}">${"number"==typeof value?value:`"${value}"`}</span>`,`<span class="json key">"${key}"</span>: ${valueDom}`}).join(",\n    "),tip=this.realData?"":container.querySelector(".quote").outerHTML;container.innerHTML=`<p>Sample response:</p>${tip}<pre class="code"><code>{\n    ${content}\n}</code></pre>`}},credit:{placeholder:{message:"success",results:[{tx:"0x0000000000000000000000000000000000000000000000000000000000000000",timestamp:"2000-00-00T00:00:00.000Z",value:"0",fromWallet:"0x0000000000000000000000000000000000000000"}]},getData:async function(key){if(!key)return this.placeholder;const data=await api.getCredit(key);return"success"==data.message&&data.results.length>0?(this.realData=!0,data):this.placeholder},update:function(data){const container=document.querySelector("#key-credit-info-container"),result=Object.entries(data.results[0]).map(([key,value])=>`<span class="json key">"${key}"</span>: <span class="json string">"${value}"</span>`).join(",\n            "),content=Object.entries(data).map(([key,value])=>"message"==key?`<span class="json key">"${key}"</span>: <span class="json string">"${value}"</span>`:`<span class="json key">"${key}"</span>: [\n        {\n            ${result}\n        },\n\n        ...\n    ]`).join(",\n    "),tip=this.realData?"":container.querySelector(".quote").outerHTML;container.innerHTML=`<p>Sample response:</p>${tip}<pre class="code"><code>{\n    ${content}\n}</code></pre>`}},logs:{placeholder:[{ip:"255.255.255.255",origin:"domain.com",timestamp:"0000-00-00T00:00:00.000Z"}],getData:async function(key){if(!key)return this.placeholder;const data=await api.getLogs(key);return!data.error&&data.length>0?(this.realData=!0,data):this.placeholder},update:function(data){const container=document.querySelector("#key-logs-info-container"),content=Object.entries(data[0]).map(([key,value])=>`<span class="json key">"${key}"</span>: <span class="json ${value?"string":"number"}">${value?`"${value}"`:value}</span>`).join(",\n        "),tip=this.realData?"":container.querySelector(".quote").outerHTML;container.innerHTML=`<p>Sample response:</p>${tip}<pre class="code"><code>[\n    {\n        ${content},\n    },\n\n    ...\n]</code></pre>`}},update:async function(key){key||this.history.update(await this.history.getData()),[this.keys,this.credit,this.logs].forEach(async item=>item.update(await item.getData(key)))}};dynamicSamples.update();class UrlBox{constructor(element,{method:method="GET",href:href="#",variables:variables={}}){this.content=href,this.href=href,this.mask=href;const domain="https://bscgas.info",placeholder="YOUR_API_KEY";this.href=this.href.replace("{{apikey}}",placeholder),this.content=this.content.replace("{{apikey}}",`</a><input class="fill-apikey" type="text" placeholder="YOUR_API_KEY"><a href="${this.href}" target="_blank">`),Object.entries(variables).forEach(([k,v])=>{this.content=this.content.split(`{{${k}}}`).join(v.toString()),this.href=this.href.split(`{{${k}}}`).join(v.toString()),this.mask=this.mask.split(`{{${k}}}`).join(v.toString())}),this.content=`\n            <span class="button-get"><i class="far fa-question-circle"></i>${method}</span>\n            <a href="${this.href}" target="_blank">${domain}${this.content}</a>\n            <span class="button-copy"><i class="far fa-copy"></i></span>\n        `,element.innerHTML=this.content,new Tooltip(element.querySelector(".button-get"),"GET request URL using all available arguments with their default values"),element.querySelector(".button-copy").addEventListener("click",()=>{navigator.clipboard.writeText(element.querySelector("a").href);const box=element.querySelector(".button-copy").parentNode;box.classList.add("clicked"),setTimeout(()=>box.classList.remove("clicked"),200)}),element.querySelectorAll(".fill-apikey").forEach(input=>{input.addEventListener("keyup",()=>{document.querySelectorAll(".fill-apikey").forEach(x=>{const href=Array.from(x.parentNode.querySelectorAll("a, input")).map(e=>e.textContent||e.value).join("");x.parentNode.querySelectorAll("a").forEach(e=>e.href=href),x.value=input.value,x.style.width=`${8.75*input.value.length}px`})}),input.addEventListener("input",()=>{input.value.match(api.regex.apiKey)&&dynamicSamples.update(input.value)})})}}new UrlBox(document.querySelector("#url-gas.url"),{href:"/gas?apikey={{apikey}}"}),new UrlBox(document.querySelector("#url-history.url"),{href:"/history?apikey={{apikey}}&from=0&to={{now}}&page=1&candles=1000&timeframe=30",variables:{now:((new Date).getTime()/1e3).toFixed(0)}}),new UrlBox(document.querySelector("#url-keys.url"),{href:"/keys/{{apikey}}"}),new UrlBox(document.querySelector("#url-credit.url"),{href:"/credit/{{apikey}}"}),new UrlBox(document.querySelector("#url-logs.url"),{href:"/logs/{{apikey}}?fromtime={{past1h}}&totime={{now}}",variables:{past1h:((new Date).getTime()/1e3-3600).toFixed(0),now:((new Date).getTime()/1e3).toFixed(0)}}),document.querySelectorAll(".template-var").forEach(e=>e.remove());const faq=[["Why does gas prices are always showing 5 GWei? Is the service bugged?","It is perfectly fine. Binance Smart Chain gas prices are almost always 5 GWei. If ever the network becomes congested we should see a price spike."],["My app have thousands of user requesting bscgas service. The API limit seems too low.","You should never call our API from the frond-end. Schedule your server to retrieve information at time intervals of your choice, then when your users request it, just send the cached data to them."],["Shouldn't I be worried if users peek into my app's source-code and discover my API key?","Do not EVER expose your API key on the front-end. If you do so, users will be able to read your source-code then make calls using your API (thus expending all your credits). Retrieve our data from your server back-end, then provide the cached data to your users when they request it."],["My API key have been exposed. What should I do?","You can revoke your API key and generate a new one <a onclick=\"document.querySelector('#manage-apikey').click()\">clicking here</a>."],["I want to make a recharge. Where can I find my API wallet?","Your API wallet can be found in the <a onclick=\"document.querySelector('#manage-apikey').click()\">API management window</a>. To add credits to your account, just make a BNB transfer of any amount to your API wallet. Use the management window to update your balance and keep track of your recharge history."]];document.querySelector("#faq").innerHTML=`<ul>${faq.map(e=>`<li><ul><li class="question"><i class="fas fa-angle-right"></i>${e[0]}</li><li class="answer">${e[1]}</li></ul></li>`).join("")}</ul>`,document.querySelectorAll("#faq .question").forEach(e=>e.addEventListener("click",()=>e.parentNode.classList.toggle("open")));
//# sourceMappingURL=index.min.js.map